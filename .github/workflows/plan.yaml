# Portions Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "plan"
on:
  pull_request:
    branches:
      - "sbox"
      - "prod"
  schedule:
    - cron: "0 2 * * *" # Daily at 0200 UTC

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  TF_VAR_gh_token: ${{ secrets.TF_VAR_gh_token }}
  TF_IN_AUTOMATION: "true"

jobs:
  run:
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
      id-token: "write"
      issues: "write"
      pull-requests: "write"

    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: "actions/checkout@v4"
      - uses: "hashicorp/setup-terraform@v3"
        with:
          terraform_version: "1.13.3"

      - name: Terraform cache
        id: tf-cache
        uses: actions/cache@v4
        with:
          path: |
            tf/nodes/.terraform
          # Use date so we refetch once a day no matter what.
          key: ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('tf/**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-tools-

      - name: Terraform init
        if: steps.tf-cache.outputs.cache-hit != 'true'
        run: |
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          terraform init

      - name: Terraform plan nodes
        id: tf-plan
        run: |
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          terraform plan

      - uses: actions/github-script@v8
        name: Attach outputs to PR
        if: github.event_name == 'pull_request'
        with:
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')

            const outputs = '${{ runner.temp }}/txt-outputs'
            const outputs_files = fs.readdirSync(outputs)
            const out_files = outputs_files.filter(file => file.match(new RegExp(`.*\.(.txt)$`, 'ig')))
            for (const file in out_files) {
              const out_file_path = outputs.concat('/', out_files[file])
              const out_file = fs.readFileSync(out_file_path, 'utf8')
              const contents = out_file.length > 65000 ? out_file.toString().substring(0, 65000) + " ..." : out_file
              const truncated_message = out_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
              const output = `
              #### ${out_files[file]} ðŸ“–: \`${{ steps.tf-plan.outcome }}\`
              <details><summary>Show Contents</summary>

              \`\`\`\n
              ${contents}
              \`\`\`

              </details>
              ${truncated_message}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
