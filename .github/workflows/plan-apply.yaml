name: "nodes-plan-apply"
on:
  workflow_dispatch:
    inputs:
      apply:
        description: 'Whether to apply the plan after creating it'
        required: false
        default: 'false'
  pull_request: {}
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 2 * * *" # Daily at 0200 UTC

env:
  TF_IN_AUTOMATION: "true"
  TF_VAR_onepassword_sa_token: ${{ secrets.ONEPASSWORD_SA_TOKEN }}

jobs:
  plan-apply:
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
      id-token: "write"
      issues: "write"
      pull-requests: "write"

    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: "actions/checkout@v5"
      - uses: "hashicorp/setup-terraform@v3"
        with:
          terraform_version: "1.13.3"

      - name: Check inputs
        env:
          GCP_TILES_TF_SA_EMAIL: ${{ secrets.GCP_TILES_TF_SA_EMAIL }}
          GCP_TILES_TF_SA_KEY: ${{ secrets.GCP_TILES_TF_SA_KEY }}
          ONEPASSWORD_SA_TOKEN: ${{ secrets.ONEPASSWORD_SA_TOKEN }}
          TILES_VPN_CONFIG: ${{ secrets.TILES_VPN_CONFIG }}
        run: |
          set -euo pipefail
          for var in GCP_TILES_TF_SA_EMAIL GCP_TILES_TF_SA_KEY ONEPASSWORD_SA_TOKEN TILES_VPN_CONFIG; do
            if [ -z "${!var}" ]; then
              echo "${var} is not set"
              exit 1
            fi
          done

      - name: Authenticate to Google Cloud
        run: |
          set -euo pipefail
          echo '${{ secrets.GCP_TILES_TF_SA_KEY }}' > "${RUNNER_TEMP}/gcp-sa-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=${RUNNER_TEMP}/gcp-sa-key.json" >> "$GITHUB_ENV"
          echo "GOOGLE_CLOUD_PROJECT=${{ secrets.PROJECT_ID }}" >> "$GITHUB_ENV"

      - name: "Install 1Password CLI"
        run: |
          set -euxo pipefail
          wget "https://cache.agilebits.com/dist/1P/op2/pkg/v2.32.0/op_linux_amd64_v2.32.0.zip" -O "${RUNNER_TEMP}/op.zip"
          unzip -d "${RUNNER_TEMP}/op" "${RUNNER_TEMP}/op.zip"
          sudo mv "${RUNNER_TEMP}/op/op" /usr/local/bin/
          rm -r "${RUNNER_TEMP}/op.zip" "${RUNNER_TEMP}/op"

      - name: Terraform cache
        id: tf-cache
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
          # Use date so we refetch once a day no matter what.
          key: ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-tools-

      - name: Terraform init
        if: steps.tf-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          terraform init

      - uses: ./.github/actions/wireguard
        name: Wireguard
        id: wireguard
        with:
          vpn_config: ${{ secrets.TILES_VPN_CONFIG }}
          conf_dir: "${{ runner.temp }}/wg"

      - name: Terraform plan nodes
        id: tf-plan
        env:
          PLAN_FILE: "${{ runner.temp }}/tfplan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.bin"
        shell: bash
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          mkdir -p "${{ runner.temp }}/txt-outputs"
          terraform plan -lock-timeout=5m -input=false -out="${PLAN_FILE}"
          terraform show -no-color "${PLAN_FILE}" \
            > "${{ runner.temp }}/txt-outputs/plan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.txt"

      - name: Terraform apply nodes
        id: tf-apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event.inputs.apply == 'true')
        env:
          PLAN_FILE: "${{ runner.temp }}/tfplan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.bin"
        shell: bash
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          echo "Applying plan"
          terraform apply -lock-timeout=5m "${PLAN_FILE}"

      - uses: ./.github/actions/attach-outputs
        name: Attach outputs to PR
        if: (success() || failure()) && github.event_name == 'pull_request'
        with:
          txt_output_dir: "${{ runner.temp }}/txt-outputs/"
          outcome: ${{ steps.tf-plan.outcome }}
