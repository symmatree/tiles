# Portions Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "plan"
on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 2 * * *" # Daily at 0200 UTC

env:
  TF_IN_AUTOMATION: "true"
  TF_VAR_onepassword_sa_token: ${{ secrets.ONEPASSWORD_SA_TOKEN }}


jobs:
  plan:
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
      id-token: "write"
      issues: "write"
      pull-requests: "write"

    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: "actions/checkout@v4"
      - uses: "hashicorp/setup-terraform@v3"
        with:
          terraform_version: "1.13.3"

      - name: Check inputs
        env:
          GCP_TILES_TF_SA_EMAIL: ${{ secrets.GCP_TILES_TF_SA_EMAIL }}
          GCP_TILES_TF_SA_KEY: ${{ secrets.GCP_TILES_TF_SA_KEY }}
          ONEPASSWORD_SA_TOKEN: ${{ secrets.ONEPASSWORD_SA_TOKEN }}
          TILES_VPN_CONFIG: ${{ secrets.TILES_VPN_CONFIG }}
        run: |
          set -euo pipefail
          for var in GCP_TILES_TF_SA_EMAIL GCP_TILES_TF_SA_KEY ONEPASSWORD_SA_TOKEN TILES_VPN_CONFIG; do
            if [ -z "${!var}" ]; then
              echo "${var} is not set"
              exit 1
            fi
          done

      - name: Authenticate to Google Cloud
        run: |
          set -euo pipefail
          echo '${{ secrets.GCP_TILES_TF_SA_KEY }}' > "${RUNNER_TEMP}/gcp-sa-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=${RUNNER_TEMP}/gcp-sa-key.json" >> "$GITHUB_ENV"
          echo "GOOGLE_CLOUD_PROJECT=${{ secrets.PROJECT_ID }}" >> "$GITHUB_ENV"

      - name: "Install 1Password CLI"
        run: |
          set -euxo pipefail
          wget "https://cache.agilebits.com/dist/1P/op2/pkg/v2.32.0/op_linux_amd64_v2.32.0.zip" -O "${RUNNER_TEMP}/op.zip"
          unzip -d "${RUNNER_TEMP}/op" "${RUNNER_TEMP}/op.zip"
          sudo mv "${RUNNER_TEMP}/op/op" /usr/local/bin/
          rm -r "${RUNNER_TEMP}/op.zip" "${RUNNER_TEMP}/op"

      - name: Terraform cache
        id: tf-cache
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
          # Use date so we refetch once a day no matter what.
          key: ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-tools-

      - name: Terraform init
        if: steps.tf-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          terraform init

      - name: Wireguard
        id: wireguard
        env:
          TILES_VPN_CONFIG: ${{ secrets.TILES_VPN_CONFIG }}
        run: |
          set -euo pipefail
          if [ -z "${TILES_VPN_CONFIG}" ]; then
            echo "No Wireguard config provided"
            exit 1
          fi
          echo "Setting up Wireguard..."
          time sudo apt-get -y \
           -qq -o Dpkg::Progress-Fancy="0" -o APT::Color="0" -o Dpkg::Use-Pty="0" \
            install wireguard-tools
          echo "${TILES_VPN_CONFIG}" > "$HOME/wg0.conf"
          chmod 0600 "$HOME/wg0.conf"
          echo "Connecting..."
          time sudo wg-quick up "$HOME/wg0.conf"
          echo "Connected"
          echo "WIREGUARD=1" | tee -a "$GITHUB_OUTPUT"

      - name: Terraform plan nodes
        id: tf-plan
        shell: bash
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}/tf/nodes"
          mkdir -p "${{ runner.temp }}/txt-outputs"
          terraform plan -lock-timeout=5m -input=false -out="${{ runner.temp }}/tfplan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.bin"
          terraform show -no-color "${{ runner.temp }}/tfplan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.bin" \
            > "${{ runner.temp }}/txt-outputs/plan-nodes-${{ steps.stamps.outputs.TIMESTAMP }}.txt"

      - name: De-wireguard
        if: always()
        run: |
          set -euo pipefail
          if [ -z "${{ steps.wireguard.outputs.WIREGUARD }}" ]; then
            echo "No Wireguard connection established, skipping disconnection."
            exit 0
          fi
          echo "Disconnecting Wireguard..."
          time sudo wg-quick down "$HOME/wg0.conf"
          echo "Disconnected"

      - uses: ./.github/actions/attach-outputs
        name: Attach outputs to PR
        if: (success() || failure()) && github.event_name == 'pull_request'
        with:
          txt_output_dir: "${{ runner.temp }}/txt-outputs/"
          outcome: ${{ steps.tf-plan.outcome }}
